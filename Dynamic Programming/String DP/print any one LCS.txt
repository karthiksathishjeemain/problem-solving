
while printing start from the highest filled cell in dp i.e dp[0][0] (in here) or dp[1][1]

class Solution {
public:
    int solve(string text1, string text2,int i,int j){
        if (i>=text1.size() ||j>=text2.size())return 0;
        int take = 0;
        if (text1[i]==text2[j])take = 1+ solve(text1,text2,i+1,j+1);
        else {
            take = max(solve(text1,text2,i+1,j),solve(text1,text2,i,j+1));
        }
        return take;
    }
    int longestCommonSubsequence(string text1, string text2) {
        //   return solve(text1,text2,0,0);
       
        int n1= text1.size();
        int n2 = text2.size();
        vector<vector<int>>dp(n1+1,vector<int>(n2+1,0));
        for (int i=n1-1;i>=0;i--){
            for (int j=n2-1;j>=0;j--){
                int take =0;
                if (text1[i]==text2[j])take =1+ dp[i+1][j+1];
                else take = max(dp[i+1][j],dp[i][j+1]);
                dp[i][j]=take;
            }
        }
        return dp[0][0];
    }
};