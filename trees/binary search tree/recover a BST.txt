Hint : Find the displaced first and then rearrange it
class Solution {
public:
    TreeNode* tree(TreeNode*node,vector<int>ans){
        if (node->val==ans[0])node->val=ans[1];
        else if (node->val==ans[1])node->val=ans[0];
        TreeNode* left=nullptr;
        TreeNode* right= nullptr;
         if (node->left)left=tree(node->left,ans);
         if (node->right)right=tree(node->right,ans);
        node->left=left;
        node->right= right;
        return node;
    }
    // void order(vector<int>&inorder,root)
    void recoverTree(TreeNode* root) {
        vector<int> inorder;
        TreeNode*node = root;
        stack<TreeNode*>st;
        // st.push(node);
        while(true){
            if (node!=nullptr){
                 st.push(node);
                node=node->left;
               

            }
            else {
                if (st.empty())break;
                  node= st.top();
                inorder.push_back(node->val);
              
                st.pop();
                node= node->right;
            }

        }
        // int curr = inorder[0];
        vector<int>ans;
        for (int i=1;i<inorder.size();i++){
            if (inorder[i]<inorder[i-1]){
            if (ans.size()==0){
             ans.push_back(inorder[i-1]);
             ans.push_back(inorder[i]);
            }
            else{
                ans.pop_back();
                ans.push_back(inorder[i]);
            }
            }
        }
        cout<<ans[0]<<ans[1]<<endl;
        root= tree(root,ans);
        // queue<int>q;
        // q.push(root);
      
    }
};