
Helpful point : Always consider the case of arrays with size 1 and size 2 after coming up with an algorithm in Rotated array



logN

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int low = 0;
        int high = nums.size()-1;
        int ans =-1;
        while(low<=high){
            int mid = low+(high-low)/2;
            if (nums[mid]==target){ans= mid;break;}
           if (nums[low]<=nums[mid]){                                            // "=" symbol is important her for the case of 2 sized array e.g [3,1]
            if (nums[low]<=target && nums[mid]>target){
                high=mid-1;
            }
            else low=mid+1;
           }
           else{
            if (nums[mid]<target && nums[high]>=target){
                low=mid+1;
            }
            else {
                high= mid-1;
            }
           }}
        return ans;
    }
};