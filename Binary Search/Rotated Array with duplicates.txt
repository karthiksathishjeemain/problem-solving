
Helpful point : Always consider the case of arrays with size 1 and size 2 after coming up with an algorithm in Rotated array.
 {This is almost similar to the roatated array problem}
class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int low=0;
        int high= nums.size()-1;
        bool ans = false;
        while(low<=high){
            int mid = low+(high-low)/2;
            if (nums[mid]==target){ans=true;break;}
            if (nums[mid]==nums[low] && nums[low]==nums[high]){low++;high--;continue;}
            if (nums[low]<=nums[mid]){
                if (nums[low]<=target && target<nums[mid]){
                    high= mid-1;

                }
                else {
                    low=mid+1;
                }
            }
            else{
                if (nums[mid]<target && target<=nums[high]){
                    low=mid+1;
                }
                else {
                    high= mid-1;
                }
            }
        }
        return ans;

    }
};